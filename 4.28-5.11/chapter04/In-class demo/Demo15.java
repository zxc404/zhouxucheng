// 位运算操作
public class Demo15{

	public static void main(String[] args){

		int a = 19 >> 2;// 算术右移，符号位不变，用符号位补溢出的高位
		int b = -19 >> 2;// 算术右移，符号位不变，用符号位补溢出的高位
		// 19的补码和原码相同：
		// 00000000 00000000 00000000 00010011
		// 右移了两个变为：
		// 00000000 00000000 00000000 00000100:4
		// -19的反码：11111111 11111111 11111111 11101100
		// -19的补码：11111111 11111111 11111111 11101101
		// 右移后补码：11111111 11111111 11111111 11111011
		// 转为反码：11111111 11111111 11111111 11111010
		// 转为原码：10000000 00000000 00000000 00000101：-5
		System.out.println(a);
		System.out.println(b);

		int c = 19 << 2;// 算术左移，符号位不变，低位补0
		int d = -19 << 2;// 算术左移，符号位不变，低位补0
		// 19的补码和原码相同：
		// 00000000 00000000 00000000 00010011
		// 左移了两个变为：
		// 00000000 00000000 00000000 01001100:76
		// -19的反码：11111111 11111111 11111111 11101100
		// -19的补码：11111111 11111111 11111111 11101101
		// 左移后补码：11111111 11111111 11111111 10110100
		// 转为反码：11111111 11111111 11111111 10110011
		// 转为原码：10000000 00000000 00000000 01001100：-76
		System.out.println(c);
		System.out.println(d);
	}
}